-- Why are you here?
-- Do not edit this file unless you know what you're doing!

local ech = ...

-- Import Modules
local config = ech:dofile("Mod-Config.lua")
local Log = ech:dofile("Modules/Log-Handler.lua")
local HappinessManager = ech:dofile("Modules/Happiness-Manager.lua")
local MealLoader = ech:dofile("Modules/Meal-Loader.lua")
local RecipeLoader = ech:dofile("Modules/Recipe-Loader.lua")

-- Prep loose Modules
HappinessManager.register(ech, config, Log)
MealLoader.register(ech, config, Log)

-- Prep Recipes
local recipeData = RecipeLoader.loadRecipes(ech, config, Log)

-- Identity
local recipes = recipeData.recipes
local recipeCount = recipeData.recipeCount
local dlcRecipeCount = recipeData.dlcRecipeCount

-- Init Stalking 
local enabledRecipeCount = 0
local enabledDLCCount = 0
local totalSkippedCount = 0
local skippedDLCCount = 0

-- Log Rep Info
Log.logInfo(ech, config, string.format("[Feast & Fortune] Processing %d total recipes (including %d DLC)", #recipes, dlcRecipeCount))

-- Normal ingredients with support for strings, tables, & key-value pairs
local function normalizeIngredients(rawIngredients, defaultStorage)
    local result = {}
    defaultStorage = defaultStorage or config.DEFAULT_STORAGE

    for key, val in pairs(rawIngredients or {}) do
        if type(key) == "number" then
            -- Array-style: string or table
            if type(val) == "string" then
                table.insert(result, {
                    Resource = val,
                    Quantity = 1,
                    Storage = defaultStorage
                })
            elseif type(val) == "table" then
                table.insert(result, {
                    Resource = val.Id,
                    Quantity = val.Quantity or 1,
                    Storage = val.Storage or defaultStorage
                })
            end
        elseif type(key) == "string" then
            -- Handles both WHEAT = 2 and ["WHEAT"] = 2
            table.insert(result, {
                Resource = tostring(key),
                Quantity = tonumber(val) or 1,
                Storage = defaultStorage
            })
        end
    end

    return result
end

-- Normal output for single & multi
local function normalizeOutput(outputTable)
    if not outputTable then return nil end

    -- nick: Output = { RESOURCE = quantity }
    if not outputTable[1] then
        for res, qty in pairs(outputTable) do
            return {
                { Resource = res, Quantity = qty or 1 }
            }
        end
    end

    -- audit o-tables
    local result = {}
    for _, out in ipairs(outputTable) do
        table.insert(result, {
            Resource = out.Id or out.Resource,
            Quantity = out.Quantity or 1
        })
    end
    return result
end

-- Build function assets
local assetList = {}

for i, recipe in ipairs(recipes) do
    --local isOverride = (i == 999)  --cease override
    local id = ("BUILDING_FUNCTION_KITCHEN_RECIPE_" .. recipe.Order) --isOverride and "BUILDING_FUNCTION_KITCHEN" or --cease override
    local ingredients = normalizeIngredients(recipe.Ingredients, config.DEFAULT_STORAGE)

    -- Check for Cups & Bowls
    local hasCommonWares = false
    for _, ing in ipairs(ingredients) do
        if ing.Resource == "COMMON_WARES" then
            hasCommonWares = true
            break
        end
    end

    -- Add Forks & Spoons if not included and/or disabled
    if recipe.IncludeCommonWares ~= false and not hasCommonWares then
        table.insert(ingredients, {
            Resource = config.COMMON_WARES.Resource,
            Quantity = config.COMMON_WARES.Quantity,
            Storage = config.DEFAULT_STORAGE
        })
    end

    -- Skip disabled cats, take strings or tables
    local categories = type(recipe.Category) == "table" and recipe.Category or { recipe.Category or "decent" }
    local isEnabled = false

	-- Check if ALL is enabled, regardless of cat
	if config.EnabledCategories.ALL then
		isEnabled = true
	else
    -- Otherwise check if any of the recipe's cats enabled
		for _, cat in ipairs(categories) do
			if config.EnabledCategories[cat] then
				isEnabled = true
				break
			end
		end
	end
	if not isEnabled then
-- Log skipped recipes for debugging
		totalSkippedCount = totalSkippedCount + 1
		if recipe.isDLC then
			skippedDLCCount = skippedDLCCount + 1
		end
		goto continue
	end

    -- I/O logic
    local inputInv = {}
    local listNeeded = {}
    for _, item in ipairs(ingredients) do
        table.insert(inputInv, { Resource = item.Resource, Quantity = item.Storage })
        table.insert(listNeeded, { Resource = item.Resource, Quantity = item.Quantity })
    end

    -- Start Prepping
    local mainCategory = categories[1]

    local functionData = {
        DataType = "BUILDING_FUNCTION_KITCHEN",
        Id = id,
        Name = recipe.Name or ("KITCHEN_RECIPE_" .. recipe.Order .. "_NAME"),
        WorkerRatioFromCapacity = config.DEFAULT_WORKER_RATIO,
        StorageRatioFromCapacity = config.DEFAULT_STORAGE_RATIO,
        InputInventoryCapacity = inputInv,
--		IsDisplayInputResourcesInDescription = false,  -- issue with this need dev support for hiding input+output on Main UI
        ResourceListNeeded = listNeeded,
        ResourceProduced = normalizeOutput(recipe.Output) or
        {{ Resource = config.OutputByCategory[mainCategory] or config.DEFAULT_OUTPUT_RESOURCE, Quantity = config.DEFAULT_OUTPUT_QUANTITY }},
        ConsumptionHappinessFactor = recipe.HappinessFactor or config.HappinessByCategory[mainCategory] or config.DEFAULT_HAPPINESS,
    }


    -- Start Cooking
        functionData.RelatedJob = {Job = "JOB_LABOUR_COOK", Behavior = "BEHAVIOR_WORK"}
        --if isOverride then ech:overrideAsset(functionData) else end --cease override
        ech:registerAsset(functionData)

-- log Reps only if enabled & processed
    enabledRecipeCount = enabledRecipeCount + 1
    if recipe.isDLC then
        enabledDLCCount = enabledDLCCount + 1
        Log.logInfo(ech, config, string.format("[Feast & Fortune] Loaded DLC Recipe: %s", recipe.Name or ("Order #" .. recipe.Order)))
    else
        Log.logInfo(ech, config, string.format("[Feast & Fortune] Loaded House Recipe: %s", recipe.Name or ("Order #" .. recipe.Order)))
    end

--Inject Assets
	table.insert(assetList, id)
    ::continue::
end

-- Log total Reps details
Log.logInfo(ech, config, string.format("[Feast & Fortune] ✅ Total recipes loaded: %d (%d House + %d DLC)",
	enabledRecipeCount,
    enabledRecipeCount - enabledDLCCount,
    enabledDLCCount))
-- Log for skipped Reps for debug
Log.logInfo(ech, config, string.format("[Feast & Fortune]⚠️ Recipes skipped: %d (%d House + %d DLC)",
    totalSkippedCount,
    totalSkippedCount - skippedDLCCount,
    skippedDLCCount))
Log.logInfo(ech, config, "[Feast & Fortune] ✅ Mod initialized successfully!", true)

-- Multi - Kitchen
ech:registerAsset({ --Setup Assignable list
    DataType = "ASSIGNABLE_BUILDING_FUNCTION_LIST",
    Id = "BUILDING_FUNCTION_TAVERN_LIST",
    AssetFunctionList = assetList
})

ech:registerAsset({ --Setup Assignable
    DataType = "BUILDING_FUNCTION_ASSIGNABLE",
    Id = "BUILDING_FUNCTION_TAVERN_KITCHEN_ASSIGNABLE",
    AuthorizedFunctionList = "BUILDING_FUNCTION_TAVERN_LIST"
})

ech:registerAsset({ --Register Kitchen Expanded
    DataType = "BUILDING",
    Id = "BUILDING_TAVERN_TAVERN_KITCHEN_EXPANDED",
    Name = "BUILDING_TAVERN_TAVERN_KITCHEN_EXPANDED_NAME",
    Description = "BUILDING_TAVERN_TAVERN_KITCHEN_EXPANDED_DESC",
    AssetCoreBuildingPart = "BUILDING_PART_MONUMENT_POLE", -- placeholder pole: majestic, unassuming
    OptionalSubBuildingIcon = "ICON_RESOURCE_MONASTIC_ROBUST_ROAST",
    AssetBuildingFunction = "BUILDING_FUNCTION_TAVERN_KITCHEN_ASSIGNABLE",
    RequiredPartList = {
        { Category = "ROOM", Min = 1 },
        { Category = "DOOR", Min = 1 },
        { Category = "CHIMNEY", Min = 1 },
    },
    IsManuallyUnlocked = true
})

ech:registerAsset({ -- Register Unlockable
    DataType = "UNLOCKABLE",
    Id = "UNLOCKABLE_TAVERN_KITCHEN_EXPANDED",
    Name = "UNLOCKABLE_TAVERN_KITCHEN_EXPANDED_NAME",
    Description = "UNLOCKABLE_TAVERN_KITCHEN_EXPANDED_DESC",
	UnlockableImage = "ICON_RESOURCE_MONASTIC_ROBUST_ROAST",
    PrerequisiteUnlockableList = {"UNLOCKABLE_LABOUR_TAVERN"},
    DataCost = {
		DataInfluenceCostList = {{Estate = "LABOUR", Quantity = 35}}
		},
	ActionList = { Action = "APPEND",
		{ DataType = "GAME_ACTION_UNLOCK_BUILDING_LIST",
			BuildingProgressData = { 
				AdditionalBuildingUnlockList = {{
					OwnerBuilding = "MONUMENT_TAVERN", 
					SubBuildingList = {"BUILDING_TAVERN_TAVERN_KITCHEN_EXPANDED"}
				}},
			}
		}
	}
})

ech:overrideAsset({ --Update Progression Chart
    Id = "PROGRESS_TIER_LABOUR_T4",
    UnlockableList = {
        Action = "APPEND",
        "UNLOCKABLE_TAVERN_KITCHEN_EXPANDED"
    }
})

--[[
JUNK/HOLDOFF
IsDisplayInputResourcesInDescription = false,
InputOutputKeyOverride = "",
OutputOnlyKeyOverride = "",

ech:overrideAsset({ -- adjust vanilla tavern meal
    Id = "MEAL",
    ResourceName = "MEAL_DECENT_NAME"
})

ech:overrideAsset({ --Append Building to Tavern Monument
    Id = "MONUMENT_TAVERN",
    SubAssetBuildingList = {
        Action = "APPEND",
        "BUILDING_TAVERN_TAVERN_KITCHEN_EXPANDED"
    }
})
--]]